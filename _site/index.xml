<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/index.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-07-06T21:31:29+06:00</updated><id>/index.xml</id><title type="html">Tokyo - personal portfolio jekyll theme</title><subtitle>Tokyo is a responsive Jekyll template for your portfolio website</subtitle><entry><title type="html">Will Design Skill Ever Rule the World?</title><link href="/receipe/trending/national/2021/03/02/will-design-skill-ever-rule-the-world.html" rel="alternate" type="text/html" title="Will Design Skill Ever Rule the World?" /><published>2021-03-02T08:14:30+06:00</published><updated>2021-03-02T08:14:30+06:00</updated><id>/receipe/trending/national/2021/03/02/will-design-skill-ever-rule-the-world</id><content type="html" xml:base="/receipe/trending/national/2021/03/02/will-design-skill-ever-rule-the-world.html">&lt;p&gt;Welcome, it’s great to have you here.&lt;/p&gt;

&lt;p&gt;We know that first impressions are important, so we’ve populated your new site with some initial &lt;strong&gt;getting started&lt;/strong&gt; posts that will help you get familiar with everything in no time. This is the first one!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;A few things you should know upfront&lt;/strong&gt;:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Ghost is designed for ambitious, professional publishers who want to actively build a business around their content. That’s who it works best for.&lt;/li&gt;
  &lt;li&gt;The entire platform can be modified and customised to suit your needs. It’s very powerful, but does require some knowledge of code. Ghost is not necessarily a good platform for beginners or people who just want a simple personal blog.&lt;/li&gt;
  &lt;li&gt;For the best experience we recommend downloading the &lt;a href=&quot;https://ghost.org/downloads/&quot;&gt;Ghost Desktop App&lt;/a&gt; for your computer, which is the best way to access your Ghost site on a desktop device.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Ghost is made by an independent non-profit organisation called the Ghost Foundation. We are 100% self funded by revenue from our &lt;a href=&quot;https://ghost.org/pricing&quot;&gt;Ghost(Pro)&lt;/a&gt; service, and every penny we make is re-invested into funding further development of free, open source technology for modern publishing.&lt;/p&gt;

&lt;p&gt;The version of Ghost you are looking at right now would not have been made possible without generous contributions from the open source &lt;a href=&quot;https://github.com/TryGhost&quot;&gt;community&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;next-up-the-editor&quot;&gt;Next up, the editor&lt;/h2&gt;

&lt;p&gt;The main thing you’ll want to read about next is probably: &lt;a href=&quot;/the-editor/&quot;&gt;the Ghost editor&lt;/a&gt;. This is where the good stuff happens.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;By the way, once you’re done reading, you can simply delete the default &lt;strong&gt;Ghost&lt;/strong&gt; user from your team to remove all of these introductory posts!&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name></name></author><category term="Receipe" /><category term="Trending" /><category term="National" /><category term="education" /><summary type="html">The can my after he cache by more name out it of differentiates we each were food, attentive</summary></entry><entry><title type="html">Format releases a new tool that enables direct video hosting</title><link href="/recipe/2021/03/02/format-releases-a-new-tool-that-enables.html" rel="alternate" type="text/html" title="Format releases a new tool that enables direct video hosting" /><published>2021-03-02T08:14:30+06:00</published><updated>2021-03-02T08:14:30+06:00</updated><id>/recipe/2021/03/02/format-releases-a-new-tool-that-enables</id><content type="html" xml:base="/recipe/2021/03/02/format-releases-a-new-tool-that-enables.html">&lt;p&gt;Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in
  various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete,
  ready-to-publish static website suitable for serving with your favorite web server.&lt;/p&gt;
&lt;p&gt;If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new
  Jekyll site by doing the following:&lt;/p&gt;
&lt;h2 id=&quot;how-to-install&quot;&gt;How to install&lt;a href=&quot;#how-to-install&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
  # Install Jekyll and Bundler gems through RubyGems
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ gem install jekyll bundler
  
  # Create a &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Jekyll&lt;/span&gt; site at &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;myblog
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ jekyll &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;myblog&lt;/span&gt;
  
  # Change into your &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;directory&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ cd myblog
  
  # Build the site on the preview server
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;myblog $ bundle exec jekyll serve
  
  # Now browse to http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4000&lt;/span&gt;
&lt;/code&gt;	  &lt;/pre&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;a href=&quot;#next-steps&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating
  blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome
  configuration options Jekyll makes available.&lt;/p&gt;
&lt;h2 id=&quot;basic-usage&quot;&gt;Basic usage&lt;a href=&quot;#basic-usage&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Jekyll gem makes a &lt;code class=&quot; highlighter-rouge language-plaintext&quot;&gt;jekyll&lt;/code&gt; executable available to you
  in your Terminal window. You can use this command in a number of ways:&lt;/p&gt;
&lt;h2 id=&quot;directory-structure&quot;&gt;Directory structure&lt;a href=&quot;#directory-structure&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written
  in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout
  or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data
  gets displayed in the layout, and more. This is all done through editing text files; the static web site is the
  final product.&lt;/p&gt;
&lt;p&gt;A basic Jekyll site usually looks something like this:&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
├── _config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yml
├── _data
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yml
├── _drafts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── begin&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;the&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;crazy&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ideas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── on&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;simplicity&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;technology&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
├── _includes
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── footer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
├── _layouts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
├── _posts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;page&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;nethack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── &lt;span class=&quot;token number&quot;&gt;2009&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;barcamp&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;boston&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;roundup&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
├── _sass
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── _base&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scss
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── _layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scss
├── _site
├── &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jekyll&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;metadata
└── index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html		&lt;/code&gt;	  &lt;/pre&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  hello&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Hello World!'&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hello&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;		  &lt;/code&gt;
  &lt;/pre&gt;
&lt;h2 id=&quot;front-matter&quot;&gt;Front matter&lt;a href=&quot;#front-matter&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be
  processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form
  of valid YAML set between triple-dashed lines. Here is a basic example:&lt;/p&gt;
&lt;p&gt;Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom
  ones of your own. These variables will then be available to you to access using Liquid tags both further down in the
  file and also in any layouts or includes that the page or post in question relies on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1920&amp;amp;h=1080&amp;amp;fit=crop&amp;amp;s=80308172730757a7db0434987fa985f3&quot; alt=&quot;Example image&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;where-additional-pages-live&quot;&gt;Where additional pages live&lt;a href=&quot;#where-additional-pages-live&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of
  creating pages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Place named HTML or Markdown files for each page in your site’s root folder.&lt;/li&gt;
  &lt;li&gt;Place pages inside folders and subfolders named whatever you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both methods work fine (and can be used in conjunction with each other), with the only real difference being the
  resulting URLs. By default, pages retain the same folder structure in &lt;code class=&quot; highlighter-rouge language-plaintext&quot;&gt;_site&lt;/code&gt; as they do in the source directory.&lt;/p&gt;</content><author><name></name></author><category term="Recipe" /><category term="education" /><summary type="html">The and room. Know and nation question would the to copy. And leather and eyes human would collection.</summary></entry><entry><title type="html">The Board of Control for Cricket in India</title><link href="/sports/2021/03/02/the-board-of-control-for-cricket-in-india.html" rel="alternate" type="text/html" title="The Board of Control for Cricket in India" /><published>2021-03-02T08:14:30+06:00</published><updated>2021-03-02T08:14:30+06:00</updated><id>/sports/2021/03/02/the-board-of-control-for-cricket-in-india</id><content type="html" xml:base="/sports/2021/03/02/the-board-of-control-for-cricket-in-india.html">&lt;p&gt;Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in
  various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete,
  ready-to-publish static website suitable for serving with your favorite web server.&lt;/p&gt;
&lt;p&gt;If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new
  Jekyll site by doing the following:&lt;/p&gt;
&lt;h2 id=&quot;how-to-install&quot;&gt;How to install&lt;a href=&quot;#how-to-install&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
  # Install Jekyll and Bundler gems through RubyGems
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ gem install jekyll bundler
  
  # Create a &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Jekyll&lt;/span&gt; site at &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;myblog
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ jekyll &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;myblog&lt;/span&gt;
  
  # Change into your &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;directory&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ cd myblog
  
  # Build the site on the preview server
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;myblog $ bundle exec jekyll serve
  
  # Now browse to http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4000&lt;/span&gt;
&lt;/code&gt;	  &lt;/pre&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;a href=&quot;#next-steps&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating
  blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome
  configuration options Jekyll makes available.&lt;/p&gt;
&lt;h2 id=&quot;basic-usage&quot;&gt;Basic usage&lt;a href=&quot;#basic-usage&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Jekyll gem makes a &lt;code class=&quot; highlighter-rouge language-plaintext&quot;&gt;jekyll&lt;/code&gt; executable available to you
  in your Terminal window. You can use this command in a number of ways:&lt;/p&gt;
&lt;h2 id=&quot;directory-structure&quot;&gt;Directory structure&lt;a href=&quot;#directory-structure&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written
  in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout
  or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data
  gets displayed in the layout, and more. This is all done through editing text files; the static web site is the
  final product.&lt;/p&gt;
&lt;p&gt;A basic Jekyll site usually looks something like this:&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
├── _config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yml
├── _data
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yml
├── _drafts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── begin&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;the&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;crazy&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ideas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── on&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;simplicity&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;technology&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
├── _includes
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── footer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
├── _layouts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
├── _posts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;page&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;nethack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── &lt;span class=&quot;token number&quot;&gt;2009&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;barcamp&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;boston&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;roundup&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
├── _sass
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── _base&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scss
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── _layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scss
├── _site
├── &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jekyll&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;metadata
└── index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html		&lt;/code&gt;	  &lt;/pre&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  hello&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Hello World!'&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hello&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;		  &lt;/code&gt;
  &lt;/pre&gt;
&lt;h2 id=&quot;front-matter&quot;&gt;Front matter&lt;a href=&quot;#front-matter&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be
  processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form
  of valid YAML set between triple-dashed lines. Here is a basic example:&lt;/p&gt;
&lt;p&gt;Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom
  ones of your own. These variables will then be available to you to access using Liquid tags both further down in the
  file and also in any layouts or includes that the page or post in question relies on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1920&amp;amp;h=1080&amp;amp;fit=crop&amp;amp;s=80308172730757a7db0434987fa985f3&quot; alt=&quot;Example image&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;where-additional-pages-live&quot;&gt;Where additional pages live&lt;a href=&quot;#where-additional-pages-live&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of
  creating pages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Place named HTML or Markdown files for each page in your site’s root folder.&lt;/li&gt;
  &lt;li&gt;Place pages inside folders and subfolders named whatever you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both methods work fine (and can be used in conjunction with each other), with the only real difference being the
  resulting URLs. By default, pages retain the same folder structure in &lt;code class=&quot; highlighter-rouge language-plaintext&quot;&gt;_site&lt;/code&gt; as they do in the source directory.&lt;/p&gt;</content><author><name></name></author><category term="Sports" /><category term="education" /><summary type="html">The and room. Know and nation question would the to copy. And leather and eyes human would collection.</summary></entry><entry><title type="html">The holding named diet present switching location</title><link href="/trending/recipe/2021/03/02/the-holding-named-diet-present-switching-stitching-location.html" rel="alternate" type="text/html" title="The holding named diet present switching location" /><published>2021-03-02T08:14:30+06:00</published><updated>2021-03-02T08:14:30+06:00</updated><id>/trending/recipe/2021/03/02/the-holding-named-diet-present-switching-stitching-location</id><content type="html" xml:base="/trending/recipe/2021/03/02/the-holding-named-diet-present-switching-stitching-location.html">&lt;p&gt;Jekyll is a simple, blog-aware, static site generator. It takes a template directory containing raw text files in
  various formats, runs it through a converter (like Markdown) and our Liquid renderer, and spits out a complete,
  ready-to-publish static website suitable for serving with your favorite web server.&lt;/p&gt;
&lt;p&gt;If you already have a full Ruby development environment with all headers and RubyGems installed, you can create a new
  Jekyll site by doing the following:&lt;/p&gt;
&lt;h2 id=&quot;how-to-install&quot;&gt;How to install&lt;a href=&quot;#how-to-install&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
  # Install Jekyll and Bundler gems through RubyGems
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ gem install jekyll bundler
  
  # Create a &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Jekyll&lt;/span&gt; site at &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;myblog
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ jekyll &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;myblog&lt;/span&gt;
  
  # Change into your &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;directory&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt; $ cd myblog
  
  # Build the site on the preview server
  &lt;span class=&quot;token operator&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;myblog $ bundle exec jekyll serve
  
  # Now browse to http&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;localhost&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4000&lt;/span&gt;
&lt;/code&gt;	  &lt;/pre&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next steps&lt;a href=&quot;#next-steps&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Building a Jekyll site with the default theme is just the first step. The real magic happens when you start creating
  blog posts, using the front matter to control templates and layouts, and taking advantage of all the awesome
  configuration options Jekyll makes available.&lt;/p&gt;
&lt;h2 id=&quot;basic-usage&quot;&gt;Basic usage&lt;a href=&quot;#basic-usage&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The Jekyll gem makes a &lt;code class=&quot; highlighter-rouge language-plaintext&quot;&gt;jekyll&lt;/code&gt; executable available to you
  in your Terminal window. You can use this command in a number of ways:&lt;/p&gt;
&lt;h2 id=&quot;directory-structure&quot;&gt;Directory structure&lt;a href=&quot;#directory-structure&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jekyll is, at its core, a text transformation engine. The concept behind the system is this: you give it text written
  in your favorite markup language, be that Markdown, Textile, or just plain HTML, and it churns that through a layout
  or a series of layout files. Throughout that process you can tweak how you want the site URLs to look, what data
  gets displayed in the layout, and more. This is all done through editing text files; the static web site is the
  final product.&lt;/p&gt;
&lt;p&gt;A basic Jekyll site usually looks something like this:&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
├── _config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yml
├── _data
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── members&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;yml
├── _drafts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── begin&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;the&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;crazy&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;ideas&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── on&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;simplicity&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;technology&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
├── _includes
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── footer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── header&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
├── _layouts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── &lt;span class=&quot;token keyword&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── post&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html
├── _posts
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── &lt;span class=&quot;token number&quot;&gt;2007&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;29&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;page&lt;span class=&quot;token operator&quot;&gt;--&lt;/span&gt;nethack&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── &lt;span class=&quot;token number&quot;&gt;2009&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;04&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;26&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;barcamp&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;boston&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;roundup&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;md
├── _sass
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   ├── _base&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scss
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;   └── _layout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;scss
├── _site
├── &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;jekyll&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;metadata
└── index&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;html		&lt;/code&gt;	  &lt;/pre&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;		&lt;code class=&quot; language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; React&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Component &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'react'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; ReactDOM &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'react-dom'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  hello&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;'Hello World!'&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;state&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;hello&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;div&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

ReactDOM&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;App &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;'root'&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;		  &lt;/code&gt;
  &lt;/pre&gt;
&lt;h2 id=&quot;front-matter&quot;&gt;Front matter&lt;a href=&quot;#front-matter&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The front matter is where Jekyll starts to get really cool. Any file that contains a YAML front matter block will be
  processed by Jekyll as a special file. The front matter must be the first thing in the file and must take the form
  of valid YAML set between triple-dashed lines. Here is a basic example:&lt;/p&gt;
&lt;p&gt;Between these triple-dashed lines, you can set predefined variables (see below for a reference) or even create custom
  ones of your own. These variables will then be available to you to access using Liquid tags both further down in the
  file and also in any layouts or includes that the page or post in question relies on.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.unsplash.com/photo-1481487196290-c152efe083f5?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1920&amp;amp;h=1080&amp;amp;fit=crop&amp;amp;s=80308172730757a7db0434987fa985f3&quot; alt=&quot;Example image&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;where-additional-pages-live&quot;&gt;Where additional pages live&lt;a href=&quot;#where-additional-pages-live&quot; class=&quot;header-link&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Where you put HTML or Markdown files for pages depends on how you want the pages to work. There are two main ways of
  creating pages:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Place named HTML or Markdown files for each page in your site’s root folder.&lt;/li&gt;
  &lt;li&gt;Place pages inside folders and subfolders named whatever you want.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Both methods work fine (and can be used in conjunction with each other), with the only real difference being the
  resulting URLs. By default, pages retain the same folder structure in &lt;code class=&quot; highlighter-rouge language-plaintext&quot;&gt;_site&lt;/code&gt; as they do in the source directory.&lt;/p&gt;</content><author><name></name></author><category term="Trending" /><category term="Recipe" /><category term="education" /><summary type="html">The and room. Know and nation question would the to copy. And leather and eyes human would collection.</summary></entry></feed>